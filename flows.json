[
    {
        "id": "281e0a510310e9c6",
        "type": "tab",
        "label": "Modbus Client",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6ad7c930.1a06b8",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            }
        },
        "site": {
            "name": "Blinky-Lite-Tutorial",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "79250bf3.365cc4",
        "type": "mqtt-broker",
        "name": "MQTT Broker",
        "broker": "$(MQTTSERVERIP)",
        "port": "$(MQTTPORT)",
        "clientid": "$(MQTTCLIENTID)",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "4a8c3caa0ff9b87d",
        "type": "modbus-client",
        "name": "Slave",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": false,
        "tcpHost": "$(MODBUSIP)",
        "tcpPort": "$(MODBUSPORT)",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": false,
        "showErrors": false,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "30f384ea.cf21fc",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Save tray config in Memory",
        "func": "msg.payload.watchdog.value = 0;\nlet tray = msg.payload;\nflow.set('tray', msg.payload);\ntray.trayControl.value = 0;\nreturn {topic: 'setting', payload:{'cube':'trayControl', value:tray.trayControl.value}};\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 480,
        "wires": [
            [
                "e6028ca70b6042d8"
            ]
        ]
    },
    {
        "id": "5023092b.a0fe38",
        "type": "mqtt in",
        "z": "281e0a510310e9c6",
        "name": "Subscribe Settings",
        "topic": "",
        "qos": "0",
        "datatype": "auto",
        "broker": "79250bf3.365cc4",
        "nl": false,
        "rap": false,
        "inputs": 1,
        "x": 150,
        "y": 360,
        "wires": [
            [
                "f812bb6a.1aec68"
            ]
        ]
    },
    {
        "id": "49c7b59e.00e86c",
        "type": "inject",
        "z": "281e0a510310e9c6",
        "name": "initFlow",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "initFlow",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "f7b2b73c.569598"
            ]
        ]
    },
    {
        "id": "f7b2b73c.569598",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Init flow Variables",
        "func": "var trayProps = {\n    box         :   env.get(\"BOX\"),\n    type        :   env.get(\"TRAYTYPE\"),\n    name        :   env.get(\"TRAYNAME\"),\n};\nflow.set('trayProps',trayProps);\nflow.set('settingInProgress', false);\nflow.set('tray', null);\nreturn {topic: \"getTrayProps\", payload: true};  \n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 100,
        "wires": [
            [
                "d3215282604f589f",
                "a1ac9e631b1c38ed"
            ]
        ]
    },
    {
        "id": "f812bb6a.1aec68",
        "type": "json",
        "z": "281e0a510310e9c6",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 330,
        "y": 360,
        "wires": [
            [
                "e0d2b8e49c2e469b"
            ]
        ]
    },
    {
        "id": "5152879001ec63ea",
        "type": "mqtt out",
        "z": "281e0a510310e9c6",
        "name": "Publish Readings",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "79250bf3.365cc4",
        "x": 1770,
        "y": 340,
        "wires": []
    },
    {
        "id": "f9be9054ce456982",
        "type": "switch",
        "z": "281e0a510310e9c6",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "setting",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ping",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "config",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "echo",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 670,
        "y": 360,
        "wires": [
            [
                "fcc98447c16c3949"
            ],
            [
                "4cedc086c72eda01"
            ],
            [
                "47de6287cc26419f"
            ],
            [
                "30f384ea.cf21fc"
            ]
        ]
    },
    {
        "id": "e0d2b8e49c2e469b",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Filter MQTT",
        "func": "return {topic:msg.topic.split('/')[5], payload:msg.payload};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 360,
        "wires": [
            [
                "f9be9054ce456982"
            ]
        ]
    },
    {
        "id": "f75b9887786b11c4",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Publish tray",
        "func": "var tray = msg.payload;\nlet newMsgTopic = flow.get('trayProps').box + '/tray/' + flow.get('trayProps').type + '/' + flow.get('trayProps').name + '/reading';\nlet newMsg = {topic: newMsgTopic, payload: JSON.stringify(tray)};;\nreturn newMsg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 340,
        "wires": [
            [
                "5152879001ec63ea"
            ]
        ]
    },
    {
        "id": "45a97566b65c65cc",
        "type": "link in",
        "z": "281e0a510310e9c6",
        "name": "Publish Tray In",
        "links": [
            "0bf699584a2609d5",
            "6af21e76e0c4ad80",
            "86aff585d6d97f09",
            "91cded1b31446957",
            "a66ef2e5b482662a",
            "df03212a7e41deb1",
            "f0c1e263384a520f",
            "f5d0568e288098ed",
            "3fc0261f194a7067",
            "396e4a58f43bbdef",
            "de9724337ab6b427",
            "184fe4c567bcfc8d",
            "bd491678f8e24259",
            "974629da19a525ea",
            "501090a1fd5f88f5"
        ],
        "x": 1475,
        "y": 340,
        "wires": [
            [
                "f75b9887786b11c4"
            ]
        ]
    },
    {
        "id": "47de6287cc26419f",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Save config file",
        "func": "let tray = flow.get('tray');\nif (tray == null) return null;\nlet cubeAlarm = tray[msg.payload.cube].alarm;\ncubeAlarm.limits.lolo = msg.payload.limits.lolo;\ncubeAlarm.limits.low  = msg.payload.limits.low;\ncubeAlarm.limits.high = msg.payload.limits.high;\ncubeAlarm.limits.hihi = msg.payload.limits.hihi;\nreturn { topic: 'newData', payload: tray };",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 400,
        "wires": [
            [
                "501090a1fd5f88f5"
            ]
        ]
    },
    {
        "id": "c2d22bcc1f4cf7b0",
        "type": "inject",
        "z": "281e0a510310e9c6",
        "name": "Archive clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "20",
        "topic": "archiveClock",
        "payloadType": "date",
        "x": 160,
        "y": 820,
        "wires": [
            [
                "6a9b2f2af2f7d084"
            ]
        ]
    },
    {
        "id": "6a9b2f2af2f7d084",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Archive Pulse",
        "func": "var tray = flow.get('tray');\nif (tray == null) return null;\nvar lastArchive = context.get('lastArchive');\nvar now = new Date().getTime();\nif ((now - lastArchive) <= tray.arcPeriod) return null;\ncontext.set('lastArchive', now);\nreturn {topic:'archivePulse', payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastArchive', new Date().getTime());",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 820,
        "wires": [
            [
                "d74e019a27b1a659"
            ]
        ]
    },
    {
        "id": "fd6a29d4dda908dd",
        "type": "inject",
        "z": "281e0a510310e9c6",
        "name": "Archive now",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "archiveNow",
        "payloadType": "date",
        "x": 150,
        "y": 880,
        "wires": [
            [
                "76d6712bed883108"
            ]
        ]
    },
    {
        "id": "76d6712bed883108",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Single Archive Pulse",
        "func": "return {topic:'archivePulse', payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastArchive', new Date().getTime());",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 880,
        "wires": [
            [
                "d74e019a27b1a659"
            ]
        ]
    },
    {
        "id": "501090a1fd5f88f5",
        "type": "link out",
        "z": "281e0a510310e9c6",
        "name": "Save config file out",
        "links": [
            "04d132d87ffeb91a",
            "45a97566b65c65cc"
        ],
        "x": 1035,
        "y": 400,
        "wires": []
    },
    {
        "id": "45409b1230e854cd",
        "type": "mqtt out",
        "z": "281e0a510310e9c6",
        "name": "Publish Archive",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "79250bf3.365cc4",
        "x": 780,
        "y": 820,
        "wires": []
    },
    {
        "id": "d74e019a27b1a659",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Publish tray",
        "func": "if (!msg.payload) return null;\nvar tray = flow.get('tray');\nif (tray == null) return null;\nvar newMsg = \n{\n    topic: flow.get('trayProps').box + '/tray/' + flow.get('trayProps').type + '/' + flow.get('trayProps').name + '/archive',\n    payload: JSON.stringify(tray)\n};\nreturn  newMsg;  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 820,
        "wires": [
            [
                "45409b1230e854cd"
            ]
        ]
    },
    {
        "id": "fcc98447c16c3949",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Create Setting",
        "func": "let modBusSettingMsg = null;\nlet normalSettingMsg = null;\nlet trayControlMessage = null;\nlet tray = flow.get('tray');\nif (tray == null) return [modBusSettingMsg,normalSettingMsg,trayControlMessage];\n\n\nswitch (msg.payload.cube) \n{\n    case 'disableComp':\n        tray.disableComp.value = msg.payload.value;\n        normalSettingMsg = { topic: 'newData', payload: tray };\n        if (msg.payload.value == 1) modBusSettingMsg = { topic: 'disableComp', payload:{fc:6, unitid:1, address:4, quantity:1, value:65535}};\n        break;\n    case 'enableComp':\n        tray.enableComp.value = msg.payload.value;\n        normalSettingMsg = { topic: 'newData', payload: tray };\n        if (msg.payload.value == 1) modBusSettingMsg = { topic: 'disableComp', payload:{fc:6, unitid:1, address:4, quantity:1, value:1}};\n        break;\n    case 'alias':\n        tray.alias.value = msg.payload.value;\n        normalSettingMsg = { topic: 'newData', payload: tray };\n       break;\n    case 'trayControl':\n        switch(msg.payload.value)\n        {\n            case 0:\n                tray.trayControl.value = 0;\n                break;\n            case 1:\n                tray.trayControl.value = -1;\n                break;\n            case 2:\n                if (tray.trayControl.value > 0)\n                {\n                    tray.trayControl.value = 2;\n                    let trayProps  = flow.get('trayProps');\n                    node.warn(\"Asking for tray from database\");\n                    trayControlMessage =\n                    {\n                        topic: trayProps.box + '/tray/' + trayProps.type + '/' + trayProps.name + '/echo',\n                        payload: JSON.stringify({ topic: trayProps.box + '/tray/' + trayProps.type + '/' + trayProps.name + '/setting/echo' })\n                    };\n                }\n                break;\n            default:\n                tray.trayControl.value = 0;\n                break;\n        }\n        normalSettingMsg = { topic: 'newData', payload: tray };\n       break;\n    default:\n        break;\n}\nflow.set('settingInProgress', false);\nreturn [modBusSettingMsg,normalSettingMsg,trayControlMessage];\n",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 260,
        "wires": [
            [
                "4402bc5ad5b005a3"
            ],
            [
                "de9724337ab6b427"
            ],
            [
                "6c29d83d29cb0f0b"
            ]
        ]
    },
    {
        "id": "f5d0568e288098ed",
        "type": "link out",
        "z": "281e0a510310e9c6",
        "name": "Alarm Scan out",
        "links": [
            "45a97566b65c65cc",
            "05c0c7b4f59ca88d"
        ],
        "x": 1365,
        "y": 1040,
        "wires": []
    },
    {
        "id": "de9724337ab6b427",
        "type": "link out",
        "z": "281e0a510310e9c6",
        "name": "nonBlinkybusSetting Out",
        "mode": "link",
        "links": [
            "04d132d87ffeb91a",
            "45a97566b65c65cc",
            "05c0c7b4f59ca88d"
        ],
        "x": 1035,
        "y": 260,
        "wires": []
    },
    {
        "id": "4402bc5ad5b005a3",
        "type": "modbus-flex-write",
        "z": "281e0a510310e9c6",
        "name": "Set Modbus",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "server": "4a8c3caa0ff9b87d",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1090,
        "y": 200,
        "wires": [
            [],
            [
                "87c770b88cf6272d",
                "b66aca1b7039e50d"
            ]
        ]
    },
    {
        "id": "063def90cca3eae3",
        "type": "link out",
        "z": "281e0a510310e9c6",
        "name": "request tray echo out",
        "mode": "link",
        "links": [
            "f882c2407b2620be"
        ],
        "x": 1035,
        "y": 40,
        "wires": []
    },
    {
        "id": "f882c2407b2620be",
        "type": "link in",
        "z": "281e0a510310e9c6",
        "name": "request tray echo in",
        "links": [
            "063def90cca3eae3",
            "6c29d83d29cb0f0b"
        ],
        "x": 1625,
        "y": 280,
        "wires": [
            [
                "5152879001ec63ea"
            ]
        ]
    },
    {
        "id": "1a3f1121b7b0f033",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Request tray from Database",
        "func": "let tray = flow.get('tray');\nif (tray != null) return [null,null];\nlet trayProps  = flow.get('trayProps');\nnode.warn(\"Asking for tray from database\");\nvar newMsg =\n{\n    topic: trayProps.box + '/tray/' + trayProps.type + '/' + trayProps.name + '/echo',\n    payload: JSON.stringify({ topic: trayProps.box + '/tray/' + trayProps.type + '/' + trayProps.name + '/setting/echo' })\n};\nreturn [newMsg, { topic: \"getTrayProps\", payload: true }];  \n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 100,
        "wires": [
            [
                "063def90cca3eae3"
            ],
            [
                "26dd391080aedecf"
            ]
        ]
    },
    {
        "id": "26dd391080aedecf",
        "type": "delay",
        "z": "281e0a510310e9c6",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1080,
        "y": 120,
        "wires": [
            [
                "175febc97e8ae24a"
            ]
        ]
    },
    {
        "id": "175febc97e8ae24a",
        "type": "link out",
        "z": "281e0a510310e9c6",
        "name": "check for tray defined out",
        "mode": "link",
        "links": [
            "2545c4a66f386231"
        ],
        "x": 1215,
        "y": 40,
        "wires": []
    },
    {
        "id": "2545c4a66f386231",
        "type": "link in",
        "z": "281e0a510310e9c6",
        "name": "check for tray defined in",
        "links": [
            "175febc97e8ae24a"
        ],
        "x": 665,
        "y": 40,
        "wires": [
            [
                "1a3f1121b7b0f033"
            ]
        ]
    },
    {
        "id": "4cedc086c72eda01",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "prep ping",
        "func": "let tray = flow.get('tray');\nif (tray == null) return null;\nreturn {topic:'newData', payload:tray};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 340,
        "wires": [
            [
                "bd491678f8e24259"
            ]
        ]
    },
    {
        "id": "bd491678f8e24259",
        "type": "link out",
        "z": "281e0a510310e9c6",
        "name": "ping out",
        "mode": "link",
        "links": [
            "e90864c178e3c08e",
            "45a97566b65c65cc"
        ],
        "x": 1035,
        "y": 340,
        "wires": []
    },
    {
        "id": "21ead1f81b53e80b",
        "type": "link in",
        "z": "281e0a510310e9c6",
        "name": "setting switch in",
        "links": [
            "e6028ca70b6042d8"
        ],
        "x": 545,
        "y": 420,
        "wires": [
            [
                "f9be9054ce456982"
            ]
        ]
    },
    {
        "id": "e6028ca70b6042d8",
        "type": "link out",
        "z": "281e0a510310e9c6",
        "name": "save tray config out",
        "mode": "link",
        "links": [
            "21ead1f81b53e80b"
        ],
        "x": 1105,
        "y": 480,
        "wires": []
    },
    {
        "id": "6c29d83d29cb0f0b",
        "type": "link out",
        "z": "281e0a510310e9c6",
        "name": "trayControl Out",
        "mode": "link",
        "links": [
            "f5153c8898e1a608",
            "f882c2407b2620be"
        ],
        "x": 1035,
        "y": 300,
        "wires": []
    },
    {
        "id": "d3215282604f589f",
        "type": "delay",
        "z": "281e0a510310e9c6",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 540,
        "y": 100,
        "wires": [
            [
                "1a3f1121b7b0f033"
            ]
        ]
    },
    {
        "id": "a1ac9e631b1c38ed",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "MQTT subscribe topic",
        "func": "let subscribeTopic = flow.get('trayProps').box + \"/tray/\" + flow.get('trayProps').type +'/' + flow.get('trayProps').name + \"/setting/#\";\nreturn {action:\"subscribe\",topic:subscribeTopic};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 280,
        "wires": [
            [
                "5023092b.a0fe38"
            ]
        ]
    },
    {
        "id": "793c3898f3118195",
        "type": "modbus-flex-getter",
        "z": "281e0a510310e9c6",
        "name": "Read Modbus ",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "4a8c3caa0ff9b87d",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 560,
        "y": 1040,
        "wires": [
            [],
            [
                "608b08b6b5244339"
            ]
        ]
    },
    {
        "id": "608b08b6b5244339",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Parse Readings",
        "func": "let tray = flow.get('tray');\nif (tray == null) return null;\n\nlet buffer2 = new ArrayBuffer(2);\nlet view2 = new DataView(buffer2);\n\ntray.timeStamp = new Date().getTime();\ntray.watchdog.value = tray.watchdog.value + 1;\nif (tray.watchdog.value > 32765) tray.watchdog.value = 0;\n\n//Operating State\nview2.setUint8(0,msg.payload.buffer[3]);\nview2.setUint8(1,msg.payload.buffer[2]);\ntray.opStatus.value = view2.getInt16(0);\n\n//Compressor State\nview2.setUint8(0,msg.payload.buffer[5]);\nview2.setUint8(1,msg.payload.buffer[4]);\ntray.compState.value = view2.getInt16(0);\n//tray.enableComp.value = tray.compState.value;\n\ntray.inverterCommOK.value = 0;\ntray.driverCommOK.value = 0;\ntray.inverterOK.value = 0;\ntray.motorSensorOK.value = 0;\ntray.lowPressSensorOK.value = 0;\ntray.highPressSensorOK.value = 0;\ntray.oilSensorOK.value = 0;\ntray.heliumSensorOK.value = 0;\ntray.coolOutSensorOK.value = 0;\ntray.coolInSensorOK.value = 0;\ntray.motorStallOK.value = 0;\ntray.staticPressOK.value = 0;\ntray.powerSupplyOK.value = 0;\ntray.threePhaseOK.value = 0;\ntray.motorCurrentOK.value = 0;\ntray.deltaPressureOK.value = 0;\ntray.highPressureOK.value = 0;\ntray.lowPressureOK.value = 0;\ntray.heliumOK.value = 0;\ntray.oilOK.value = 0;\ntray.coolantOutOK.value = 0;\ntray.coolantInOK.value = 0;\n\nlet buffer4 = new ArrayBuffer(4);\nlet view4 = new DataView(buffer4);\nlet newData = []\n//Warning No\nview4.setUint8(0,msg.payload.buffer[8]);\nview4.setUint8(1,msg.payload.buffer[9]);\nview4.setUint8(2,msg.payload.buffer[6]);\nview4.setUint8(3,msg.payload.buffer[7]);\nsetStatusBits(view4.getInt32(0), true);\n\n//Alarm No\nview4.setUint8(0,msg.payload.buffer[12]);\nview4.setUint8(1,msg.payload.buffer[13]);\nview4.setUint8(2,msg.payload.buffer[10]);\nview4.setUint8(3,msg.payload.buffer[11]);\nsetStatusBits(view4.getInt32(0), false);\n\n//Cooling in\nview4.setUint8(0,msg.payload.buffer[16]);\nview4.setUint8(1,msg.payload.buffer[17]);\nview4.setUint8(2,msg.payload.buffer[14]);\nview4.setUint8(3,msg.payload.buffer[15]);\ntray.coolInTemp.value = rounder(view4.getFloat32(0), 3);\n\n//Cooling out\nview4.setUint8(0,msg.payload.buffer[20]);\nview4.setUint8(1,msg.payload.buffer[21]);\nview4.setUint8(2,msg.payload.buffer[18]);\nview4.setUint8(3,msg.payload.buffer[19]);\ntray.coolOutTemp.value = rounder(view4.getFloat32(0), 3);\n\n//Oil\nview4.setUint8(0,msg.payload.buffer[24]);\nview4.setUint8(1,msg.payload.buffer[25]);\nview4.setUint8(2,msg.payload.buffer[22]);\nview4.setUint8(3,msg.payload.buffer[23]);\ntray.oilTemp.value = rounder(view4.getFloat32(0), 3);\n\n//Helium\nview4.setUint8(0,msg.payload.buffer[28]);\nview4.setUint8(1,msg.payload.buffer[29]);\nview4.setUint8(2,msg.payload.buffer[26]);\nview4.setUint8(3,msg.payload.buffer[27]);\ntray.heliumTemp.value = rounder(view4.getFloat32(0), 3);\n\n//Low Pressure\nview4.setUint8(0,msg.payload.buffer[32]);\nview4.setUint8(1,msg.payload.buffer[33]);\nview4.setUint8(2,msg.payload.buffer[30]);\nview4.setUint8(3,msg.payload.buffer[31]);\ntray.lowPress.value = rounder(view4.getFloat32(0), 3);\n\n//Low Pressure Avg\nview4.setUint8(0,msg.payload.buffer[36]);\nview4.setUint8(1,msg.payload.buffer[37]);\nview4.setUint8(2,msg.payload.buffer[34]);\nview4.setUint8(3,msg.payload.buffer[35]);\ntray.lowPressAvg.value = rounder(view4.getFloat32(0), 3);\n\n//High Pressure\nview4.setUint8(0,msg.payload.buffer[40]);\nview4.setUint8(1,msg.payload.buffer[41]);\nview4.setUint8(2,msg.payload.buffer[38]);\nview4.setUint8(3,msg.payload.buffer[39]);\ntray.highPress.value = rounder(view4.getFloat32(0), 3);\n\n//High Pressure Avg\nview4.setUint8(0,msg.payload.buffer[44]);\nview4.setUint8(1,msg.payload.buffer[45]);\nview4.setUint8(2,msg.payload.buffer[42]);\nview4.setUint8(3,msg.payload.buffer[43]);\ntray.highPressAvg.value = rounder(view4.getFloat32(0), 3);\n\n//Delta of Avg Pressures\nview4.setUint8(0,msg.payload.buffer[48]);\nview4.setUint8(1,msg.payload.buffer[49]);\nview4.setUint8(2,msg.payload.buffer[46]);\nview4.setUint8(3,msg.payload.buffer[47]);\ntray.deltaPressAvg.value = rounder(view4.getFloat32(0), 3);\n\n//Motor Current\nview4.setUint8(0,msg.payload.buffer[52]);\nview4.setUint8(1,msg.payload.buffer[53]);\nview4.setUint8(2,msg.payload.buffer[50]);\nview4.setUint8(3,msg.payload.buffer[51]);\ntray.motorAmps.value = rounder(view4.getFloat32(0), 3);\n\n//Hours Of Operation\nview4.setUint8(0,msg.payload.buffer[56]);\nview4.setUint8(1,msg.payload.buffer[57]);\nview4.setUint8(2,msg.payload.buffer[54]);\nview4.setUint8(3,msg.payload.buffer[55]);\ntray.opHours.value = rounder(view4.getFloat32(0), 3);\n\nlet buffer1 = new ArrayBuffer(1);\nlet view1 = new DataView(buffer1);\n// Pressure Scale\nview1.setUint8(0,msg.payload.buffer[59]);\nlet pressScaleIndex = view1.getUint8(0);\nlet pressUnits = 'psi'\nif (pressScaleIndex == 1) pressUnits = 'Bar';\nif (pressScaleIndex == 2) pressUnits = 'KPA';\n\n// Temperature Scale\nview1.setUint8(0,msg.payload.buffer[61]);\nlet tempScaleIndex = view1.getUint8(0);\nlet tempScaleUnits = 'F'\nif (tempScaleIndex == 1) tempScaleUnits = 'C';\nif (tempScaleIndex == 2) tempScaleUnits = 'K';\n\ntray.coolInTemp.unit = tempScaleUnits;\ntray.coolOutTemp.unit = tempScaleUnits;\ntray.oilTemp.unit = tempScaleUnits;\ntray.heliumTemp.unit = tempScaleUnits;\n\ntray.lowPress.unit = pressUnits;\ntray.lowPressAvg.unit = pressUnits;\ntray.highPress.unit = pressUnits;\ntray.highPressAvg.unit = pressUnits;\ntray.deltaPressAvg.unit = pressUnits;\n\n//Serial no \nview2.setUint8(0,msg.payload.buffer[63]);\nview2.setUint8(1,msg.payload.buffer[62]);\ntray.serialNo.value = view2.getUint16(0);\n\n// Model no\ntray.modelNo.value = getModel(msg.payload.buffer[64],msg.payload.buffer[65]);\n//Software version\ntray.softwareRev.value = Number(msg.payload.buffer[66].toString() + '.' + msg.payload.buffer[67].toString());\n\nreturn {topic:\"newData\", payload:tray};\n\nfunction getModel(highByte,lowByte)\n{\n    let strReturn = 'CPA';\n    switch(highByte)\n    {\n        case 1:\n            strReturn = strReturn + '08';\n            break;\n        case 2:\n            strReturn = strReturn + '09';\n            break;\n        case 3:\n            strReturn = strReturn + '10';\n            break;\n        case 4:\n            strReturn = strReturn + '11';\n            break;\n        case 5:\n            strReturn = strReturn + '12';\n            break;\n        default:\n            strReturn = strReturn + 'XX';\n            break;\n    }\n    switch(lowByte)\n    {\n        case 1:\n            strReturn = strReturn + 'A1';\n            break;\n        case 2:\n            strReturn = strReturn + '01';\n            break;\n        case 3:\n            strReturn = strReturn + '02';\n            break;\n        case 4:\n            strReturn = strReturn + '03';\n            break;\n        case 5:\n            strReturn = strReturn + 'H3';\n            break;\n        case 6:\n            strReturn = strReturn + 'I3';\n            break;\n        case 7:\n            strReturn = strReturn + '04';\n            break;\n        case 8:\n            strReturn = strReturn + 'H4';\n            break;\n        case 9:\n            strReturn = strReturn + '05';\n            break;\n        case 10:\n            strReturn = strReturn + 'H5';\n            break;\n        case 11:\n            strReturn = strReturn + 'I6';\n            break;\n        case 12:\n            strReturn = strReturn + '06';\n            break;\n        case 13:\n            strReturn = strReturn + '07';\n            break;\n         case 14:\n            strReturn = strReturn + 'H7';\n            break;\n        case 15:\n            strReturn = strReturn + 'I7';\n            break;\n        case 16:\n            strReturn = strReturn + '08';\n            break;\n        case 17:\n            strReturn = strReturn + '09';\n            break;\n        case 18:\n            strReturn = strReturn + '9C';\n            break;\n        case 19:\n            strReturn = strReturn + '10';\n            break;\n        case 20:\n            strReturn = strReturn + '1I';\n            break;\n        case 21:\n            strReturn = strReturn + '11';\n            break;\n        case 22:\n            strReturn = strReturn + '12';\n            break;\n        case 23:\n            strReturn = strReturn + '13';\n            break;\n        case 24:\n            strReturn = strReturn + '14';\n            break;\n        default:\n            strReturn = strReturn + 'YY';\n            break;\n   }\n   return strReturn;\n}\nfunction bitCheck(statusWord, bit)\n{\n    let bitty = false;\n    let maskShift = 32 - bit;\n    let andShift = bit - 1;\n\n    if ((((0x80000000 >>> maskShift) & statusWord) >>> andShift) > 0) bitty = true;\n    return bitty;\n}\nfunction setStatusBits(statusWord, warning)\n{\n    for (let ibit = 31; ibit > 0; --ibit )\n    {\n        let bitOn = bitCheck(statusWord, ibit);\n        if (bitOn)\n        {\n            switch (ibit)\n            {\n                case 31:\n                    if (warning)\n                    {\n                        tray.inverterCommOK.value = 1;\n                    }\n                    else\n                    {\n                        tray.inverterCommOK.value = 2;\n                    }\n                    break;\n                case 30:\n                    if (warning)\n                    {\n                        tray.driverCommOK.value = 1;\n                    }\n                    else\n                    {\n                        tray.driverCommOK.value = 2;\n                    }\n                    break;\n                case 29:\n                    if (warning)\n                    {\n                        tray.inverterOK.value = 1;\n                    }\n                    else\n                    {\n                        tray.inverterOK.value = 2;\n                    }\n                    break;\n                case 28:\n                    if (warning)\n                    {\n                        tray.motorCurrentOK.value = 1;\n                    }\n                    else\n                    {\n                        tray.motorCurrentOK.value = 2;\n                    }\n                    break;\n                case 27:\n                    if (warning)\n                    {\n                        tray.motorSensorOK.value = 1;\n                    }\n                    else\n                    {\n                        tray.motorSensorOK.value = 2;\n                    }\n                    break;\n                case 26:\n                    if (warning)\n                    {\n                        tray.lowPressSensorOK.value = 1;\n                    }\n                    else\n                    {\n                        tray.lowPressSensorOK.value = 2;\n                    }\n                    break;\n                case 25:\n                    if (warning)\n                    {\n                        tray.highPressSensorOK.value = 1;\n                    }\n                    else\n                    {\n                        tray.highPressSensorOK.value = 2;\n                    }\n                    break;\n                case 24:\n                    if (warning)\n                    {\n                        tray.oilSensorOK.value = 1;\n                    }\n                    else\n                    {\n                        tray.oilSensorOK.value = 2;\n                    }\n                    break;\n                case 23:\n                    if (warning)\n                    {\n                        tray.heliumSensorOK.value = 1;\n                    }\n                    else\n                    {\n                        tray.heliumSensorOK.value = 2;\n                    }\n                    break;\n                case 22:\n                    if (warning)\n                    {\n                        tray.coolOutSensorOK.value = 1;\n                    }\n                    else\n                    {\n                        tray.coolOutSensorOK.value = 2;\n                    }\n                    break;\n                case 21:\n                    if (warning)\n                    {\n                        tray.coolInSensorOK.value = 1;\n                    }\n                    else\n                    {\n                        tray.coolInSensorOK.value = 2;\n                    }\n                    break;\n                case 20:\n                    if (warning)\n                    {\n                        tray.motorStallOK.value = 1;\n                    }\n                    else\n                    {\n                        tray.motorStallOK.value = 2;\n                    }\n                    break;\n                case 19:\n                    if (warning)\n                    {\n                        tray.staticPressOK.value = -1;\n                    }\n                    else\n                    {\n                        tray.staticPressOK.value = -2;\n                    }\n                    break;\n                case 18:\n                    if (warning)\n                    {\n                        tray.staticPressOK.value = 1;\n                    }\n                    else\n                    {\n                        tray.staticPressOK.value = 2;\n                    }\n                    break;\n                case 17:\n                    if (warning)\n                    {\n                        tray.powerSupplyOK.value = 1;\n                    }\n                    else\n                    {\n                        tray.powerSupplyOK.value = 2;\n                    }\n                    break;\n                case 16:\n                    if (warning)\n                    {\n                        tray.threePhaseOK.value = 1;\n                    }\n                    else\n                    {\n                        tray.threePhaseOK.value = 2;\n                    }\n                    break;\n                case 15:\n                    if (warning)\n                    {\n                        tray.motorCurrentOK.value = -1;\n                    }\n                    else\n                    {\n                        tray.motorCurrentOK.value = -2;\n                    }\n                    break;\n                case 14:\n                    if (warning)\n                    {\n                        tray.deltaPressureOK.value = -1;\n                    }\n                    else\n                    {\n                        tray.deltaPressureOK.value = -2;\n                    }\n                    break;\n                case 13:\n                    if (warning)\n                    {\n                        tray.deltaPressureOK.value = 1;\n                    }\n                    else\n                    {\n                        tray.deltaPressureOK.value = 2;\n                    }\n                    break;\n                case 12:\n                    if (warning)\n                    {\n                        tray.highPressureOK.value = -1;\n                    }\n                    else\n                    {\n                        tray.highPressureOK.value = -2;\n                    }\n                    break;\n                case 11:\n                    if (warning)\n                    {\n                        tray.highPressureOK.value = 1;\n                    }\n                    else\n                    {\n                        tray.highPressureOK.value = 2;\n                    }\n                    break;\n                case 10:\n                    if (warning)\n                    {\n                        tray.lowPressureOK.value = -1;\n                    }\n                    else\n                    {\n                        tray.lowPressureOK.value = -2;\n                    }\n                    break;\n                case 9:\n                    if (warning)\n                    {\n                        tray.lowPressureOK.value = 1;\n                    }\n                    else\n                    {\n                        tray.lowPressureOK.value = 2;\n                    }\n                    break;\n                case 8:\n                    if (warning)\n                    {\n                        tray.heliumOK.value = -1;\n                    }\n                    else\n                    {\n                        tray.heliumOK.value = -2;\n                    }\n                    break;\n                case 7:\n                    if (warning)\n                    {\n                        tray.heliumOK.value = 1;\n                    }\n                    else\n                    {\n                        tray.heliumOK.value = 2;\n                    }\n                    break;\n                case 6:\n                    if (warning)\n                    {\n                        tray.oilOK.value = -1;\n                    }\n                    else\n                    {\n                        tray.oilOK.value = -2;\n                    }\n                    break;\n                case 5:\n                    if (warning)\n                    {\n                        tray.oilOK.value = 1;\n                    }\n                    else\n                    {\n                        tray.oilOK.value = 2;\n                    }\n                    break;\n                case 4:\n                    if (warning)\n                    {\n                        tray.coolantOutOK.value = -1;\n                    }\n                    else\n                    {\n                        tray.coolantOutOK.value = -2;\n                    }\n                    break;\n                case 3:\n                    if (warning)\n                    {\n                        tray.coolantOutOK.value = 1;\n                    }\n                    else\n                    {\n                        tray.coolantOutOK.value = 2;\n                    }\n                    break;\n                case 2:\n                    if (warning)\n                    {\n                        tray.coolantInOK.value = -1;\n                    }\n                    else\n                    {\n                        tray.coolantInOK.value = -2;\n                    }\n                    break;\n                case 1:\n                    if (warning)\n                    {\n                        tray.coolantInOK.value = 1;\n                    }\n                    else\n                    {\n                        tray.coolantInOK.value = 2;\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n}\nfunction rounder(toBeRounded, places)\n{\n    let roundy = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000];\n    return Math.round(roundy[places] * toBeRounded) / roundy[places];\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 1040,
        "wires": [
            [
                "cd5aaf29fd0c0de2"
            ]
        ]
    },
    {
        "id": "99fbe8135d0ce161",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Readings Alarm Scan",
        "func": "let tray = msg.payload;\nlet alarmFlagReading = scalarAlarmScan(tray, 'reading');\nlet alarmFlagSetting = scalarAlarmScan(tray, 'setting');\n\nlet newMsg = null;\nswitch( tray.trayControl.value)\n{\n    case 0:\n        newMsg = {topic: 'alarmScanCompleted', payload: tray};\n        break;\n    case -1:\n        tray.trayControl.value = 1;\n        newMsg = {topic: 'alarmScanCompleted', payload: tray};\n        break;\n    default:\n        break;\n}\nreturn newMsg;\n\nfunction getActionArray(tray, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(tray);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (tray[keys[ii]].hasOwnProperty('type'))\n        {\n            if (tray[keys[ii]].type == type)\n            {\n                if (tray[keys[ii]].action == actionType)\n                {\n                    actionArray.push(tray[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(tray, actionType)\n{\n    var alarmFlag = false;\n    var actionArray = getActionArray(tray, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            let oldAlarmValue = actionArray[ii].alarm.value;\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n                if (actionArray[ii].alarm.value != oldAlarmValue) alarmFlag = true;\n            }\n        }\n    }\n    return alarmFlag;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastAlarm', -1);",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 1040,
        "wires": [
            [
                "f5d0568e288098ed"
            ]
        ]
    },
    {
        "id": "cd5aaf29fd0c0de2",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Permit Check",
        "func": "let tray = msg.payload;\nif (tray.hasOwnProperty('permit')) tray.permit.value = 1;\nlet alarmFlagReading = scalarAlarmScan(tray, 'reading');\nlet alarmFlagSetting = scalarAlarmScan(tray, 'setting');\nif (tray.hasOwnProperty('permit'))\n{\n    tray.permit.value = 1;\n    if (alarmFlagReading || alarmFlagSetting) tray.permit.value = 0;\n}\n\nreturn msg;\n\nfunction getActionArray(tray, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(tray);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (tray[keys[ii]].hasOwnProperty('type'))\n        {\n            if (tray[keys[ii]].type == type)\n            {\n                if (tray[keys[ii]].action == actionType)\n                {\n                    actionArray.push(tray[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(tray, actionType)\n{\n    var alarmFlag = false;\n    var actionArray = getActionArray(tray, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            let oldAlarmValue = actionArray[ii].alarm.value;\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n                if (actionArray[ii].alarm.value > 2) alarmFlag = true;\n            }\n        }\n    }\n    return alarmFlag;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastAlarm', -1);",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 1040,
        "wires": [
            [
                "99fbe8135d0ce161"
            ]
        ]
    },
    {
        "id": "ae58d87596068f05",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Modbus read command",
        "func": "let inputRegisterMsg   = {topic:\"readInputRegisters\",   payload:{fc:4, unitid:1, address:0, quantity:35}}\nlet holdingRegisterMsg = {topic:\"readHoldingRegisters\", payload:{fc:3, unitid:1, address:0, quantity:2}}\nreturn inputRegisterMsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1040,
        "wires": [
            [
                "793c3898f3118195"
            ]
        ]
    },
    {
        "id": "50a8bbba9eec6420",
        "type": "inject",
        "z": "281e0a510310e9c6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "20",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1040,
        "wires": [
            [
                "ae58d87596068f05"
            ]
        ]
    },
    {
        "id": "eb672c119c6dd8d4",
        "type": "modbus-flex-getter",
        "z": "281e0a510310e9c6",
        "name": "Read Modbus ",
        "showStatusActivities": true,
        "showErrors": true,
        "showWarnings": true,
        "logIOActivities": false,
        "server": "4a8c3caa0ff9b87d",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 680,
        "y": 1160,
        "wires": [
            [],
            [
                "69cede98b09ddb6a"
            ]
        ]
    },
    {
        "id": "fb29a271d92e3fe6",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "Modbus holdingRegisterMsg read command",
        "func": "let holdingRegisterMsg = {topic:\"readHoldingRegisters\", payload:{fc:3, unitid:1, address:0, quantity:5}}\nreturn holdingRegisterMsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1160,
        "wires": [
            [
                "eb672c119c6dd8d4"
            ]
        ]
    },
    {
        "id": "3282fb2092ef242b",
        "type": "inject",
        "z": "281e0a510310e9c6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 1160,
        "wires": [
            [
                "fb29a271d92e3fe6"
            ]
        ]
    },
    {
        "id": "69cede98b09ddb6a",
        "type": "debug",
        "z": "281e0a510310e9c6",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 1160,
        "wires": []
    },
    {
        "id": "58cbc8e2ea3051fb",
        "type": "function",
        "z": "281e0a510310e9c6",
        "name": "en/disable comp state 0",
        "func": "let tray = flow.get('tray');\ntray.enableComp.value = 0;\ntray.disableComp.value = 0;\nmsg.payload = tray;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 200,
        "wires": [
            [
                "f75b9887786b11c4"
            ]
        ]
    },
    {
        "id": "87c770b88cf6272d",
        "type": "delay",
        "z": "281e0a510310e9c6",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1260,
        "y": 200,
        "wires": [
            [
                "58cbc8e2ea3051fb"
            ]
        ]
    },
    {
        "id": "b66aca1b7039e50d",
        "type": "debug",
        "z": "281e0a510310e9c6",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 240,
        "wires": []
    }
]